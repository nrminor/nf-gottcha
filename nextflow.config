params {

	// Illumina- and Nanopore-generated FASTQ directories, which can both be used within
	// the same workflow run
	illumina_fastq_dir = null
	nanopore_fastq_dir = null

	// A minimap2 MMI index generated for a reference FASTA, which allows more efficient
	// querying for kmer matches
	ref_mmi = null

	// the location to cache the reference MMI index, if downloaded via a URL
	ref_mmi_cache = "${launchDir}/ref_mmi_cache"

	// preset settings, defaulting to illumina settings
	min_cov = 0.005 // minimum coverage as a proportion of signature:w nanoporebases
	min_reads = 3 // minimum number of reads mapped to be considered a hit
	min_len = 60 // minimum number of signature bases to be present for a strain to be considered present
	max_Zscore = 30 // maximum estimated z-score for the depth of the mapped region. This threshold
	// helps determine if mapped reads are concentrated in a short region (indicating
	// stacking) or spread across the signature. Higher values indicate more stacking.
	match_factor = 0.5 // minimum proportion of alignment for signature fragments (which can be as
	// short as 30 bp) to be considered a valid match
	
	// the number of parallel CPU processes to use when profiling with GOTTCHA2
    gottcha2_cpus = 8

	// the location to cache the reference MMI index, if downloaded via a URL
	ref_mmi_cache = "${launchDir}/ref_mmi_cache"

	// the results file hierarchy
	results = "${launchDir}/results"
	setup_results = params.results + "/00_setup"
	gottcha_results = params.results + "/01_gottcha2"
	gottcha_sam = params.gottcha_results + "/01_sam_files"
	gottcha_stats = params.gottcha_results + "/02_stats_tsvs"
	gottcha_fasta = params.gottcha_results + "/03_representative_seqs"

	// whether to cleanup the work directory after a successful run
	cleanup = null

}

// WHETHER TO GENERATE A REPORT OF RUN STATISTICS
report {
    enabled = true
		overwrite = true
    file    = "${params.results}/report.html"
}


// WHETHER TO GENERATE A VISUALIZATION OF THE WORKFLOW
dag {
	enabled = true
	overwrite = true
	file = "${params.results}/workflow-visualization.png"
}


// WHETHER TO REMOVE TEMPORARY FILES AFTER A SUCCESSFUL RUN
cleanup = params.cleanup


// PROFILE OPTIONS
profiles {

	standard {

		apptainer.enabled = false
		docker.enabled = false
		conda.enabled = false

	}

	docker {

		docker.enabled = true
		singularity.enabled = false
		conda.enabled = false

		process.container = "nrminor/nf-gottcha:v0.1.0"

	}

	singularity {

		singularity.enabled = true
		docker.enabled = false
		conda.enabled = false

		process.container = "docker://nrminor/nf-gottcha:v0.1.0"

	}

	apptainer {

		apptainer.enabled = true
		docker.enabled = false
		conda.enabled = false

		process.container = "docker://nrminor/nf-gottcha:v0.1.0"

	}

	chtc_hpc {

		// container engine settings
		singularity.enabled = true
        apptainer.cacheDir = "work/apptainer/"
        singularity.cacheDir = "work/singularity"
        singularity.autoMounts = true

		// container address
		process.container = "docker://nrminor/nf-gottcha:v0.1.0"

        // slurm job settings
        process.executor = "slurm"
        process.clusterOptions = "--partition=shared"
		process.maxForks = 10
		process.time = 24.h

    }

	containerless {

		apptainer.enabled = false
		docker.enabled = false
		conda.enabled = false

    }
}

